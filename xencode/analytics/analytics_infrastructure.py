#!/usr/bin/env python3\n\"\"\"\nAnalytics Infrastructure\n\nComprehensive analytics infrastructure that integrates all monitoring,\nmetrics collection, and analytics components into a unified system.\n\"\"\"\n\nimport asyncio\nimport json\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Callable\nfrom dataclasses import dataclass, field\nfrom enum import Enum\n\n# Import analytics components\ntry:\n    from .analytics_engine import AnalyticsEngine, AnalyticsConfig\n    from .metrics_collector import MetricsCollector, AnalyticsEvent\n    from .event_tracker import EventTracker, TrackedEvent, EventCategory\n    from ..monitoring.metrics_collector import PrometheusMetricsCollector\n    print(\"Analytics imports successful\")\nexcept ImportError as e:\n    print(f\"Import error: {e}\")\n    # Create mock classes\n    class AnalyticsEngine:\n        def __init__(self, *args, **kwargs): pass\n        async def start(self): pass\n        async def stop(self): pass\n        def get_metrics_summary(self): return {}\n        def track_user_action(self, *args, **kwargs): return None\n        def track_system_event(self, *args, **kwargs): return None\n        def track_performance(self, *args, **kwargs): return None\n        def track_error(self, *args, **kwargs): return None\n        def track_ai_interaction(self, *args, **kwargs): return None\n        def generate_analytics_report(self, *args, **kwargs): return {}\n    \n    class AnalyticsConfig:\n        def __init__(self, *args, **kwargs): pass\n    \n    class PrometheusMetricsCollector:\n        def __init__(self, *args, **kwargs): pass\n        async def start(self): pass\n        async def stop(self): pass\n        def get_status(self): return {}\n\n# Import system components for integration\ntry:\n    import psutil\n    PSUTIL_AVAILABLE = True\nexcept ImportError:\n    PSUTIL_AVAILABLE = False\n\n\nclass AnalyticsLevel(str, Enum):\n    \"\"\"Analytics collection levels\"\"\"\n    MINIMAL = \"minimal\"\n    STANDARD = \"standard\"\n    COMPREHENSIVE = \"comprehensive\"\n    DEBUG = \"debug\"\n\n\n@dataclass\nclass AnalyticsInfrastructureConfig:\n    \"\"\"Configuration for analytics infrastructure\"\"\"\n    level: AnalyticsLevel = AnalyticsLevel.STANDARD\n    enable_prometheus: bool = True\n    enable_system_monitoring: bool = True\n    storage_path: Optional[Path] = None\n    prometheus_port: int = 8000\n    slow_operation_threshold_ms: float = 1000.0\n    error_spike_threshold: int = 10\n\n\n@dataclass\nclass AnalyticsAlert:\n    \"\"\"Represents an analytics alert\"\"\"\n    alert_id: str\n    alert_type: str\n    severity: str\n    title: str\n    description: str\n    timestamp: datetime\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    resolved: bool = False\n    resolved_at: Optional[datetime] = None\n\n\nclass AnalyticsInfrastructure:\n    \"\"\"\n    Comprehensive analytics infrastructure\n    \n    Integrates all analytics components and provides a unified interface\n    for metrics collection, event tracking, and system monitoring.\n    \"\"\"\n    \n    def __init__(self, config: Optional[AnalyticsInfrastructureConfig] = None):\n        self.config = config or AnalyticsInfrastructureConfig()\n        \n        # Initialize storage path\n        if not self.config.storage_path:\n            self.config.storage_path = Path.home() / \".xencode\" / \"analytics\"\n        self.config.storage_path.mkdir(parents=True, exist_ok=True)\n        \n        # Initialize components\n        self._initialize_components()\n        \n        # Analytics state\n        self._running = False\n        self._background_tasks = []\n        \n        # Alert system\n        self.alerts: List[AnalyticsAlert] = []\n        self.alert_callbacks: List[Callable[[AnalyticsAlert], None]] = []\n        \n        # Performance tracking\n        self.performance_baselines = {}\n    \n    def _initialize_components(self) -> None:\n        \"\"\"Initialize all analytics components\"\"\"\n        \n        # Analytics engine configuration\n        analytics_config = AnalyticsConfig(\n            enable_metrics=True,\n            enable_events=True,\n            enable_prometheus=self.config.enable_prometheus,\n            metrics_port=self.config.prometheus_port,\n            storage_path=self.config.storage_path\n        )\n        \n        # Initialize analytics engine\n        self.analytics_engine = AnalyticsEngine(analytics_config)\n        \n        # Initialize Prometheus collector if enabled\n        if self.config.enable_prometheus:\n            self.prometheus_collector = PrometheusMetricsCollector(\n                metrics_port=self.config.prometheus_port,\n                collect_system_metrics=self.config.enable_system_monitoring\n            )\n        else:\n            self.prometheus_collector = None\n        \n        # Get references to sub-components\n        self.metrics_collector = self.analytics_engine.metrics_collector\n        self.event_tracker = self.analytics_engine.event_tracker\n    \n    async def start(self) -> None:\n        \"\"\"Start the analytics infrastructure\"\"\"\n        if self._running:\n            return\n        \n        self._running = True\n        \n        print(\"ðŸš€ Starting Analytics Infrastructure...\")\n        \n        # Start analytics engine\n        await self.analytics_engine.start()\n        \n        # Start Prometheus collector\n        if self.prometheus_collector:\n            await self.prometheus_collector.start()\n        \n        print(\"âœ… Analytics Infrastructure started\")\n        print(f\"   ðŸ“Š Analytics Level: {self.config.level.value}\")\n        print(f\"   ðŸ”§ Prometheus: {'Enabled' if self.config.enable_prometheus else 'Disabled'}\")\n        print(f\"   ðŸ’¾ Storage: {self.config.storage_path}\")\n    \n    async def stop(self) -> None:\n        \"\"\"Stop the analytics infrastructure\"\"\"\n        self._running = False\n        \n        print(\"ðŸ›‘ Stopping Analytics Infrastructure...\")\n        \n        # Cancel background tasks\n        for task in self._background_tasks:\n            task.cancel()\n        \n        # Wait for tasks to complete\n        if self._background_tasks:\n            await asyncio.gather(*self._background_tasks, return_exceptions=True)\n        \n        # Stop components\n        await self.analytics_engine.stop()\n        \n        if self.prometheus_collector:\n            await self.prometheus_collector.stop()\n        \n        print(\"âœ… Analytics Infrastructure stopped\")\n    \n    def track_user_action(self, action: str, user_id: str, **kwargs) -> Optional[str]:\n        \"\"\"Track user action\"\"\"\n        return self.analytics_engine.track_user_action(action, user_id, **kwargs)\n    \n    def track_system_event(self, event: str, component: str, **kwargs) -> Optional[str]:\n        \"\"\"Track system event\"\"\"\n        return self.analytics_engine.track_system_event(event, component, **kwargs)\n    \n    def track_performance(self, operation: str, duration_ms: float, component: str, **kwargs) -> Optional[str]:\n        \"\"\"Track performance event\"\"\"\n        return self.analytics_engine.track_performance(operation, duration_ms, component, **kwargs)\n    \n    def track_error(self, error_type: str, error_message: str, component: str, **kwargs) -> Optional[str]:\n        \"\"\"Track error event\"\"\"\n        return self.analytics_engine.track_error(error_type, error_message, component, **kwargs)\n    \n    def track_ai_interaction(self, model: str, operation: str, user_id: str, duration_ms: float, **kwargs) -> Optional[str]:\n        \"\"\"Track AI interaction\"\"\"\n        return self.analytics_engine.track_ai_interaction(model, operation, user_id, duration_ms, **kwargs)\n    \n    def get_system_status(self) -> Dict[str, Any]:\n        \"\"\"Get comprehensive system status\"\"\"\n        status = {\n            'analytics_infrastructure': {\n                'running': self._running,\n                'level': self.config.level.value,\n                'storage_path': str(self.config.storage_path)\n            },\n            'components': {\n                'analytics_engine': self.analytics_engine.get_metrics_summary() if self.analytics_engine else None,\n                'prometheus_collector': self.prometheus_collector.get_status() if self.prometheus_collector else None\n            }\n        }\n        \n        # Add system metrics if available\n        if PSUTIL_AVAILABLE:\n            try:\n                memory = psutil.virtual_memory()\n                disk = psutil.disk_usage('/')\n                \n                status['system'] = {\n                    'cpu_percent': psutil.cpu_percent(),\n                    'memory_percent': memory.percent,\n                    'memory_used_gb': memory.used / (1024**3),\n                    'memory_total_gb': memory.total / (1024**3),\n                    'disk_percent': disk.percent,\n                    'disk_used_gb': disk.used / (1024**3),\n                    'disk_total_gb': disk.total / (1024**3)\n                }\n            except Exception as e:\n                status['system'] = {'error': str(e)}\n        \n        return status\n    \n    def generate_analytics_report(self, hours: int = 24) -> Dict[str, Any]:\n        \"\"\"Generate comprehensive analytics report\"\"\"\n        report = {\n            'report_generated_at': datetime.now().isoformat(),\n            'time_period_hours': hours,\n            'infrastructure_status': self.get_system_status()\n        }\n        \n        # Add analytics engine report\n        if self.analytics_engine:\n            report['analytics_engine_report'] = self.analytics_engine.generate_analytics_report(hours)\n        \n        return report\n\n\n# Global analytics infrastructure instance\nanalytics_infrastructure = AnalyticsInfrastructure()\n