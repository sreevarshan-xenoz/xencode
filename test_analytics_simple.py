#!/usr/bin/env python3\n\"\"\"\nSimple test for analytics infrastructure\n\"\"\"\n\nimport asyncio\nimport sys\nfrom pathlib import Path\n\n# Add the xencode directory to the path\nsys.path.insert(0, str(Path(__file__).parent))\n\ntry:\n    from xencode.analytics.analytics_engine import AnalyticsEngine\n    print(\"‚úÖ Analytics engine imported successfully\")\nexcept ImportError as e:\n    print(f\"‚ùå Failed to import analytics engine: {e}\")\n    sys.exit(1)\n\ntry:\n    from xencode.monitoring.metrics_collector import PrometheusMetricsCollector\n    print(\"‚úÖ Prometheus metrics collector imported successfully\")\nexcept ImportError as e:\n    print(f\"‚ùå Failed to import Prometheus metrics collector: {e}\")\n\nasync def test_analytics_infrastructure():\n    \"\"\"Test the analytics infrastructure\"\"\"\n    print(\"\\nüß™ Testing Analytics Infrastructure...\")\n    \n    # Test analytics engine\n    analytics_engine = AnalyticsEngine()\n    \n    try:\n        await analytics_engine.start()\n        print(\"‚úÖ Analytics engine started successfully\")\n        \n        # Test tracking\n        event_id = analytics_engine.track_user_action(\"test_action\", \"test_user\")\n        print(f\"‚úÖ User action tracked: {event_id}\")\n        \n        perf_id = analytics_engine.track_performance(\"test_operation\", 150.0, \"test_component\")\n        print(f\"‚úÖ Performance tracked: {perf_id}\")\n        \n        error_id = analytics_engine.track_error(\"test_error\", \"Test error message\", \"test_component\")\n        print(f\"‚úÖ Error tracked: {error_id}\")\n        \n        # Get metrics summary\n        summary = analytics_engine.get_metrics_summary()\n        print(f\"‚úÖ Metrics summary: {summary}\")\n        \n        # Generate report\n        report = analytics_engine.generate_analytics_report(hours=1)\n        print(f\"‚úÖ Analytics report generated with {len(report)} sections\")\n        \n        await analytics_engine.stop()\n        print(\"‚úÖ Analytics engine stopped successfully\")\n        \n    except Exception as e:\n        print(f\"‚ùå Error testing analytics engine: {e}\")\n        return False\n    \n    # Test Prometheus collector\n    prometheus_collector = PrometheusMetricsCollector(metrics_port=8001)  # Use different port\n    \n    try:\n        await prometheus_collector.start()\n        print(\"‚úÖ Prometheus collector started successfully\")\n        \n        # Test metrics recording\n        prometheus_collector.record_request(\"GET\", \"/test\", \"200\", 0.1)\n        prometheus_collector.set_active_connections(5)\n        prometheus_collector.record_error(\"test_component\", \"test_error\")\n        \n        status = prometheus_collector.get_status()\n        print(f\"‚úÖ Prometheus collector status: {status}\")\n        \n        await prometheus_collector.stop()\n        print(\"‚úÖ Prometheus collector stopped successfully\")\n        \n    except Exception as e:\n        print(f\"‚ùå Error testing Prometheus collector: {e}\")\n        return False\n    \n    print(\"\\nüéâ All analytics infrastructure tests passed!\")\n    return True\n\nif __name__ == \"__main__\":\n    success = asyncio.run(test_analytics_infrastructure())\n    if success:\n        print(\"\\n‚úÖ Analytics infrastructure is working correctly\")\n    else:\n        print(\"\\n‚ùå Analytics infrastructure has issues\")\n        sys.exit(1)\n